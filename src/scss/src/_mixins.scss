@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(../../img/#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

@mixin sprite-mh50p($sprite){
    margin-top: - floor(nth($sprite, 6) / 2);
}
@mixin sprite-ml50p($sprite){
    margin-left: - floor(nth($sprite, 5) / 2);
}

$button-size: 40px;
$transition: .3s; // increase this to see the transformations in slow-motion
@mixin line {
  display: inline-block;
  width: $button-size;
  height: 4px;
  border-radius: $button-size/14; 
  // transition: $transition;
}
@mixin vw($min, $max){
    @media (min-width: #{$min}px) and (max-width: #{$max}px) {
      @content;
    }
}